//
// Generated file, do not edit! Created by nedtool 5.4 from nl_msg.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NL_MSG_M_H
#define __NL_MSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>nl_msg.msg:15</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet nl_msg
 * {
 *     int nl_packetType;
 *     int nl_packetId;
 * }
 * </pre>
 */
class nl_msg : public ::omnetpp::cPacket
{
  protected:
    int nl_packetType;
    int nl_packetId;

  private:
    void copy(const nl_msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const nl_msg&);

  public:
    nl_msg(const char *name=nullptr, short kind=0);
    nl_msg(const nl_msg& other);
    virtual ~nl_msg();
    nl_msg& operator=(const nl_msg& other);
    virtual nl_msg *dup() const override {return new nl_msg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNl_packetType() const;
    virtual void setNl_packetType(int nl_packetType);
    virtual int getNl_packetId() const;
    virtual void setNl_packetId(int nl_packetId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const nl_msg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, nl_msg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NL_MSG_M_H

